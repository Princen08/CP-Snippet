const int N = 2e5 + 10;

vector<int> adj[N];

struct LCA{
    vector<int> tin,tout;
    vector<vector<int>> up;
    vector<int> depth;
    int timer;
    int n,l;
    LCA(int _n,int root){
      n = _n;
      l = ceil(log2(n));
      tin.resize(n);
      tout.resize(n);
      depth.resize(n);
      up.assign(n + 1,vector<int> (l+2, 0));
      dfs(root, 0 , 0);
    } 
   void dfs(int v, int p, int d){
        depth[v] = d;
        tin[v] = ++timer;
        up[v][0] = p;
        for (int i = 1; i <= l; ++i){
            up[v][i] = up[up[v][i-1]][i-1];
        }

        for (int u : adj[v]) {
            if (u != p)
                dfs(u, v, d + 1);
        }
        tout[v] = ++timer;
    }
    bool is_anc(int u,int v){
        return tin[u] <= tin[v] && tout[v] <= tout[u]; 
    }
    int lca(int u,int v){
        if(is_anc(u,v)){
            return u;
        }
         if(is_anc(v,u)){
            return v;
        }
        for(int i = l; i>=0; i--){
            if(!is_anc(up[u][i],v)){
                u = up[u][i];
            }
        }
        return up[u][0];
    }
    int dist(int u, int v) {
      int x = depth[u];
      int y = depth[v];
      if(depth[u] < depth[v]) {
        swap(u, v);
      }
      for(int i = l ; i >= 0; i--) {
        if(depth[u] - (int)pow(2, i) >= depth[v]) {
          u = up[u][i];
        }
      }
      if(u == v) {
        return x + y - (2 * depth[u]);
      }
      for(int i = l; i >= 0; i--) {
        if(up[u][i] != up[v][i]) {
          u = up[u][i];
          v = up[v][i];
        }
      }
      return x + y - (2 * depth[up[v][0]]);
    }
};
